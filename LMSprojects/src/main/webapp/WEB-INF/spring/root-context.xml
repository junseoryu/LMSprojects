<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		<bean id="sulDB" class="com.zaxxer.hikari.HikariConfig">
      <property name="driverClassName" value="oracle.jdbc.OracleDriver" />
      <property name="jdbcUrl" value="jdbc:oracle:thin:@106.243.194.229:9021:xe" />
      <property name="username" value="SEHUI" />
      <property name="password" value="1234" />
   </bean>
   
   <bean id="dSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
      <constructor-arg ref="sulDB" />
   </bean>
   
   <bean id="SessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dSource"/>
   </bean>
		
	<bean id="dbSession" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg name="sqlSessionFactory" ref="SessionFactory"/>
   </bean>
	<!--<mybatis-spring:scan base-package="eljl.database.mapper" />  -->
	
	<!-- Transaction -->
	<bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name = "dataSource" ref = "dSource" />
	</bean>
	<tx:annotation-driven />
	
	<!-- Java SendMail -->
	<bean id = "javaMail" class = "org.springframework.mail.javamail.JavaMailSenderImpl">
	<property name = "host" value = "smtp.naver.com"/>
	<property name = "port" value = "465"/>
	<property name = "username" value = "ssh994"/>
	<property name = "password" value = "thadl0601!!"/>
	<property name = "defaultEncoding" value = "UTF-8"/>
	<property name = "javaMailProperties">
		<props>
			<prop key = "mail.debug">true</prop>
			<prop key = "mail.smtp.ssl.protocals">TLSv1.2</prop>
			<prop key = "mail.transport.protocol">smtp</prop>
			<prop key = "mail.smtp.ssl.checkserveridentity">true</prop>
			<prop key = "mail.smtp.auth">true</prop>
			<prop key = "mail.smtps.ssl.trust">*</prop>
			<prop key = "mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
		</props>
	</property>
	
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="204857600" ></property>
		<property name = "maxInMemorySize" value = "5000000" ></property>
		<property name="defaultEncoding" value="utf-8" ></property>
	<!--<property name = "uploadTempDir"></property>  ->잘 안쓰는이유는? 특정경로 지정이 아닌 수동으로 직접 해야해서 파일 경로가 꼬일수가 있다. -->
	</bean>
	
	
	<!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>  -->
</beans>

<!-- WebMvcConfurationAdapter -> 빈에 등록하고 리졸브로 다시 등록을 시킴
@Bean("mp")
getResolver  -> 원래 이렇게 써야하는데 듀플리케이트5.0버전? 부터 등록하는 과정이 사라짐!
위에 id를 multipartResolver class명 뒤와 동일하게 만들어줘야함 안그러면 getResolver를 환경설정을 따로 또 해줘야함
원래 빈 아이디는 자유롭게 할 수 있지만 이 부분에서는 id를 신경써줘야함!-->


